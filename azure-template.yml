jobs:
- job: ${{ format(parameters.name) }}
  pool:
    ${{ if eq(parameters.os, 'macosx') }}:
      vmImage: macOS 10.13
    ${{ if eq(parameters.os, 'linux') }}:
      vmImage: Ubuntu 16.04
    ${{ if eq(parameters.os, 'windows') }}:
      vmImage: vs2017-win2016

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      architecture: 'x64'

  - ${{ if eq(parameters.os, 'linux') }}:

    # This is a temporary step while waiting for the following issue to be fixed:
    # https://github.com/microsoft/azure-pipelines-image-generation/issues/225

    - script: sudo apt-get install -y python3-dev
      displayName: Intalling python3-dev

  - script: pip install git+https://github.com/pyinstaller/pyinstaller.git
    displayName: Installing pyinstaller

  - script: pip install PyQt5 PyQtWebEngine
    displayName: Installing app dependencies

  - script: pip freeze
    displayName: List dependencies

  - script: pyinstaller --onedir qtonly.py
    displayName: Building application in onedir mode

  - ${{ if eq(parameters.os, 'linux') }}:

    - script: dist/qtonly/qtonly
      displayName: Testing application

  - ${{ if eq(parameters.os, 'macosx') }}:

    - script: dist/qtonly/qtonly
      displayName: Testing application

  - ${{ if eq(parameters.os, 'windows') }}:

    - script: .\dist\qtonly\qtonly
      displayName: Testing application

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: dist
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/qtonly-${{ parameters.os }}.tar.gz'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: qtonly-${{ parameters.os }}
      targetPath: $(Build.ArtifactStagingDirectory)
